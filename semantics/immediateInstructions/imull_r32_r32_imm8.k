// Autogenerated using stratification.
requires "x86-configuration.k"

module IMULL-R32-R32-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (imull Imm8:MInt, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(Imm8))), 32, 64))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(Imm8))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(Imm8))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(Imm8))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(Imm8))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
    
endmodule

module IMULL-R32-R32-IMM8-SEMANTICS
  imports IMULL-R32-R32-IMM8
endmodule
