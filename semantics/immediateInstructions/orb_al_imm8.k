// Autogenerated using stratification.
requires "x86-configuration.k"

module ORB-AL-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (orb Imm8:MInt, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), Imm8))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( Imm8, 7, 8)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( Imm8, 6, 7)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( Imm8, 5, 6)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( Imm8, 4, 5)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( Imm8, 3, 4)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( Imm8, 2, 3)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( Imm8, 1, 2)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( Imm8, 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), Imm8), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( Imm8, 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
    
endmodule

module ORB-AL-IMM8-SEMANTICS
  imports ORB-AL-IMM8
endmodule
