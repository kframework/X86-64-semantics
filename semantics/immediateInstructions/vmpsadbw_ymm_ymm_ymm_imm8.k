// Autogenerated using stratification.
requires "x86-configuration.k"

module VMPSADBW-YMM-YMM-YMM-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmpsadbw Imm8:MInt, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => 
      execinstr (vmpsadbw
        //Low slices  
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(Imm8, 6, 8), 7 , 0 ),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(Imm8, 6, 8), 15, 8 ),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(Imm8, 6, 8), 23, 16),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(Imm8, 6, 8), 31, 24),

        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 7 ,  0),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 15,  8),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 23, 16),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 31, 24),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 39, 32),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 47, 40),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 55, 48),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 63, 56),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 71, 64),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 79, 72),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(Imm8, 5, 6), 87, 80),

        //High slices  
        selectSliceMPSAD( getRegisterValue(R2, RSMap), 
            extractMInt(Imm8, 3, 5), 7 +Int
            128, 0 +Int 128),
        selectSliceMPSAD( getRegisterValue(R2, RSMap), 
            extractMInt(Imm8, 3, 5), 15+Int
            128, 8 +Int 128),
        selectSliceMPSAD( getRegisterValue(R2, RSMap), 
            extractMInt(Imm8, 3, 5), 23+Int
            128, 16+Int 128),
        selectSliceMPSAD( getRegisterValue(R2, RSMap), 
            extractMInt(Imm8, 3, 5), 31+Int
            128, 24+Int 128),

        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 7
            +Int 128,  0 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 15
            +Int 128,  8 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 23
            +Int 128, 16 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 31
            +Int 128, 24 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 39
            +Int 128, 32 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 47
            +Int 128, 40 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 55
            +Int 128, 48 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 63
            +Int 128, 56 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 71
            +Int 128, 64 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 79
            +Int 128, 72 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(Imm8, 2, 3), 87
            +Int 128, 80 +Int 128),

        R4:Ymm, 
        .Operands)
  ...</k>   
    <regstate> RSMap </regstate>
      requires bitwidthMInt(Imm8) ==Int 8


  rule <k> 
    execinstr (vmpsadbw 
        LowSrcByte0:MInt, LowSrcByte1:MInt, LowSrcByte2:MInt, LowSrcByte3:MInt,
        LowDestByte0:MInt, LowDestByte1:MInt, LowDestByte2:MInt, LowDestByte3:MInt,
        LowDestByte4:MInt, LowDestByte5:MInt, LowDestByte6:MInt, LowDestByte7:MInt,
        LowDestByte8:MInt, LowDestByte9:MInt, LowDestByte10:MInt,

        HighSrcByte0:MInt, HighSrcByte1:MInt, HighSrcByte2:MInt, HighSrcByte3:MInt,
        HighDestByte0:MInt, HighDestByte1:MInt, HighDestByte2:MInt, HighDestByte3:MInt,
        HighDestByte4:MInt, HighDestByte5:MInt, HighDestByte6:MInt, HighDestByte7:MInt,
        HighDestByte8:MInt, HighDestByte9:MInt, HighDestByte10:MInt,
        R4:Ymm,  .Operands) =>
  setRegisterValue(
  concatenateMInt(
    concatenateMInt(

      concatenateMInt(    
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte7, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte8, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte9, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte10, HighSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte6, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte7, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte8, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte9, HighSrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte5, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte6, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte7, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte8, HighSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte4, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte5, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte6, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte7, HighSrcByte3))
          ))
        ),
     
      concatenateMInt(
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte3, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte4, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte5, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte6, HighSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte2, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte3, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte4, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte5, HighSrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte1, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte2, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte3, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte4, HighSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte0, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte1, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte2, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte3, HighSrcByte3))
          ))
      )),

      //Lower 
      
    concatenateMInt(

      concatenateMInt(    
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte7, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte8, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte9, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte10, LowSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte6, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte7, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte8, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte9, LowSrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte5, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte6, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte7, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte8, LowSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte4, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte5, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte6, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte7, LowSrcByte3))
          ))
        ),
     
      concatenateMInt(
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte3, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte4, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte5, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte6, LowSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte2, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte3, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte4, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte5, LowSrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte1, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte2, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte3, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte4, LowSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte0, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte1, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte2, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte3, LowSrcByte3))
          ))
      ))
      
      
      ) , R4)

  ...</k>
endmodule

module VMPSADBW-YMM-YMM-YMM-IMM8-SEMANTICS
  imports VMPSADBW-YMM-YMM-YMM-IMM8
endmodule
