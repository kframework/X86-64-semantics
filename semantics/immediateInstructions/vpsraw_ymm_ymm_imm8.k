// Autogenerated using stratification.
requires "x86-configuration.k"

module VPSRAW-YMM-YMM-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpsraw Imm8:MInt, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))))))))))))))))))
)

    </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
    
endmodule

module VPSRAW-YMM-YMM-IMM8-SEMANTICS
  imports VPSRAW-YMM-YMM-IMM8
endmodule
