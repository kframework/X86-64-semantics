// Autogenerated using stratification.
requires "x86-configuration.k"

module VSHUFPS-YMM-YMM-YMM-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vshufps Imm8:MInt, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R2, RSMap), 64, 96) #fi) #else (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 96, 128) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R2, RSMap), 64, 96) #fi) #else (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 96, 128) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 5, 6), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( Imm8, 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 32) #else extractMInt( getParentValue(R3, RSMap), 64, 96) #fi) #else (#ifMInt eqMInt( extractMInt( Imm8, 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 32, 64) #else extractMInt( getParentValue(R3, RSMap), 96, 128) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 7, 8), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( Imm8, 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 32) #else extractMInt( getParentValue(R3, RSMap), 64, 96) #fi) #else (#ifMInt eqMInt( extractMInt( Imm8, 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 32, 64) #else extractMInt( getParentValue(R3, RSMap), 96, 128) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 5, 6), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( Imm8, 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( Imm8, 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 7, 8), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( Imm8, 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( Imm8, 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi))))))))
)

    </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
    
endmodule

module VSHUFPS-YMM-YMM-YMM-IMM8-SEMANTICS
  imports VSHUFPS-YMM-YMM-YMM-IMM8
endmodule
