// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTQ-RAX-IMM32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testq Imm32:MInt, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( Imm32, 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( Imm32, 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( Imm32, 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( Imm32, 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( Imm32, 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( Imm32, 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( Imm32, 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( Imm32, 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( getParentValue(%rax, RSMap), mi(64, svalueMInt(Imm32))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(Imm32)), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
      requires bitwidthMInt(Imm32) ==Int 32
    
endmodule

module TESTQ-RAX-IMM32-SEMANTICS
  imports TESTQ-RAX-IMM32
endmodule
