// Autogenerated using stratification.
requires "x86-configuration.k"

module VPBLENDW-XMM-XMM-XMM-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpblendw Imm8:MInt, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 144) #else extractMInt( getParentValue(R2, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 144, 160) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 176) #else extractMInt( getParentValue(R2, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 176, 192) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 208) #else extractMInt( getParentValue(R2, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 208, 224) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 240) #else extractMInt( getParentValue(R2, RSMap), 224, 240) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 240, 256) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
    
endmodule

module VPBLENDW-XMM-XMM-XMM-IMM8-SEMANTICS
  imports VPBLENDW-XMM-XMM-XMM-IMM8
endmodule
