// Autogenerated using stratification.
requires "x86-configuration.k"

module ROUNDPS-XMM-M128-IMM8
  imports X86-CONFIGURATION

  context execinstr(roundps:Opcode Imm8:MInt, HOLE:Mem, R3:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (roundps:Opcode Imm8:MInt, memOffset( MemOff:MInt):MemOffset, R3:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (roundps Imm8, memOffset( MemOff), R3:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (roundps:Opcode Imm8:MInt, memOffset( MemOff:MInt):MemOffset, R3:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( cvt_single_to_int32_rm(extractMInt( Mem128, 0, 32), Imm8), concatenateMInt( cvt_single_to_int32_rm(extractMInt( Mem128, 32, 64), Imm8), concatenateMInt( cvt_single_to_int32_rm(extractMInt( Mem128, 64, 96), Imm8), cvt_single_to_int32_rm(extractMInt( Mem128, 96, 128), Imm8)))))
      )
    </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
endmodule
