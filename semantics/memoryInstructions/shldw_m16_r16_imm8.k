// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLDW-M16-R16-CL
  imports X86-CONFIGURATION

  context execinstr (shldw Imm8:MInt, R2:R16, HOLE:Mem,  .Operands) [result(MemOffset)]

  rule <k>
    execinstr (shldw Imm8:MInt, R2:R16,  memOffset( MemOff:MInt):MemOffset,  .Operands)  =>
      loadFromMemory( MemOff, 16) ~>
      execinstr (shldw Imm8:MInt, R2,  memOffset( MemOff),  .Operands)
  ...</k>
      requires bitwidthMInt(Imm8) ==Int 8

  rule <k>
    memLoadValue(Mem16:MInt):MemLoadValue ~>  
        execinstr (shldw Imm8:MInt, R2:R16, memOffset( MemOff:MInt):MemOffset,  .Operands) =>  
      execinstr (shldw memOffset( MemOff), Mem16, getRegisterValue(R2, RSMap), 
          shiftCountMask(Imm8, 32),  .Operands)
  ...</k>
    <regstate> RSMap </regstate>
      requires bitwidthMInt(Imm8) ==Int 8

  rule <k>
    execinstr (shldw memOffset( MemOff), MIdest:MInt, MIsrc:MInt, MIcount:MInt, .Operands) => .
  ...</k> 
    requires eqMInt(MIcount, mi(bitwidthMInt(MIcount), 0))

  rule <k>
    execinstr (shldw memOffset( MemOff), MIdest:MInt, MIsrc:MInt, MIcount:MInt, .Operands) => storeToMemory(undefMInt16, MemOff, 16)
  ...</k> 
   <regstate>
  RSMap:Map => updateMap(RSMap,
    "ZF" |-> (undefMInt)
    "SF" |-> (undefMInt)
    "CF" |-> (undefMInt)
    "OF" |-> (undefMInt)
    "PF" |-> (undefMInt)
    "AF" |-> (undefMInt)
  )
   </regstate>
      requires ugtMInt(MIcount, mi(bitwidthMInt(MIcount), bitwidthMInt(MIdest)))


  rule <k>
    execinstr (shldw memOffset( MemOff), MIdest:MInt, MIsrc:MInt, MIcount:MInt, .Operands) => 
      execinstr (shldw memOffset( MemOff), MIdest:MInt, MIsrc:MInt, MIcount:MInt, 
          orMInt( shiftLeftMInt(MIdest, uvalueMInt(MIcount)),
          lshrMInt(MIsrc, bitwidthMInt(MIdest) -Int uvalueMInt(MIcount))),
          .Operands) 
  ...</k> 
      requires uleMInt(MIcount, mi(bitwidthMInt(MIcount), bitwidthMInt(MIdest)))
       andBool (notBool eqMInt(MIcount, mi(bitwidthMInt(MIcount), 0)))

  rule <k>
    execinstr (shldw memOffset( MemOff), MIdest:MInt, MIsrc:MInt, MIcount:MInt, MIresult:MInt, .Operands) => 
      setFlag(extractMInt(MIdest, uvalueMInt(MIcount) -Int 1, uvalueMInt(MIcount)), "CF") ~> 
      updateSignFlag(MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateParityFlag(MIresult) ~> 

      setFlag(xorMInt(extractMInt(MIdest, 0, 1), extractMInt(MIresult, 0, 1)), "OF") ~>
      setFlag(undefMInt, "AF") ~> 
      storeToMemory(MIresult, MemOff, 16)
  ...</k> 
      requires eqMInt(MIcount, mi(bitwidthMInt(MIcount), 1))
  
  rule <k>
    execinstr (shldw memOffset( MemOff), MIdest:MInt, MIsrc:MInt, MIcount:MInt, MIresult:MInt, .Operands) => 
      setFlag(extractMInt(MIdest, uvalueMInt(MIcount) -Int 1, uvalueMInt(MIcount)), "CF") ~> 
      updateSignFlag(MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateParityFlag(MIresult) ~> 

      setFlag(undefMInt, "OF") ~>
      setFlag(undefMInt, "AF") ~> 
      storeToMemory(MIresult, MemOff, 16)
  ...</k> 
      requires uleMInt(MIcount, mi(bitwidthMInt(MIcount), bitwidthMInt(MIdest)))
        andBool (notBool eqMInt(MIcount, mi(bitwidthMInt(MIcount), 1)))
       andBool (notBool eqMInt(MIcount, mi(bitwidthMInt(MIcount), 0)))
endmodule
