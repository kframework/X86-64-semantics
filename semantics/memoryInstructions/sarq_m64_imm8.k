// Autogenerated using stratification.
requires "x86-configuration.k"

module SARQ-M64-IMM8
  imports X86-CONFIGURATION

  context execinstr(sarq:Opcode Imm8:MInt, HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (sarq:Opcode Imm8:MInt, memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (sarq Imm8, memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (sarq:Opcode Imm8:MInt, memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      
            storeToMemory(
              extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 0, 64),
              MemOff,
              64
            )
          
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 64, 65), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 56, 57), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 0, 64), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( aShiftRightMInt( concatenateMInt( Mem64, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
endmodule
