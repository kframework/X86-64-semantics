// Autogenerated using stratification.
requires "x86-configuration.k"

module SUBW-M16-IMM16
  imports X86-CONFIGURATION

  context execinstr(subw:Opcode Imm16:MInt, HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (subw:Opcode Imm16:MInt, memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 16) ~>
      execinstr (subw Imm16, memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires bitwidthMInt(Imm16) ==Int 16
          
  rule <k>
    memLoadValue(Mem16:MInt):MemLoadValue ~> execinstr (subw:Opcode Imm16:MInt, memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      
            storeToMemory(
              extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 1, 17),
              MemOff,
              16
            )
          
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( Imm16, 11, 12), extractMInt( Mem16, 11, 12)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( Imm16, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( Mem16, 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( Imm16, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Imm16)), mi(17, 1)), concatenateMInt( mi(1, 0), Mem16)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires bitwidthMInt(Imm16) ==Int 16
endmodule
