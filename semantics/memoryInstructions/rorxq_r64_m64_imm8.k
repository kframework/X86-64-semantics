// Autogenerated using stratification.
requires "x86-configuration.k"

module RORXQ-R64-M64-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rorx:Opcode Imm8:MInt, M:Mem, R3:R64,  .Operands) => execinstr (rorxq:Opcode Imm8:MInt, M:Mem, R3:R64,  .Operands) 
  ...</k>
  context execinstr(rorxq:Opcode Imm8:MInt, HOLE:Mem, R3:R64,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (rorxq:Opcode Imm8:MInt, memOffset( MemOff:MInt):MemOffset, R3:R64,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (rorxq Imm8, memOffset( MemOff), R3,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (rorxq:Opcode Imm8:MInt, memOffset( MemOff:MInt):MemOffset, R3:R64,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> orMInt( lshrMInt( Mem64, uvalueMInt(andMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 63)))), shiftLeftMInt( Mem64, uvalueMInt(subMInt( mi(64, 64), andMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 63))))))
      )
    </regstate>
      requires bitwidthMInt(Imm8) ==Int 8
endmodule
